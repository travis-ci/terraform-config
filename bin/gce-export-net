#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

def main
  options = {
    module_name: ENV.fetch('MODULE_NAME', 'gce_project_1'),
    noop: false,
    terraform: ENV.fetch('TERRAFORM', 'terraform')
  }

  OptionParser.new do |opts|
    opts.on('-m', '--module-name=MODULE_NAME') do |v|
      options[:module_name] = v.strip
    end

    opts.on('-n', '--noop') do
      options[:noop] = true
    end

    opts.on('-T', '--terraform=TERRAFORM') do |v|
      options[:terraform] = v.strip
    end
  end.parse!

  module_name = options.fetch(:module_name)
  noop = !!options.fetch(:noop)
  terraform = options.fetch(:terraform)

  command = %W[#{terraform} state rm] + (
    %w[
      aws_route53_record.bastion-b
      aws_route53_record.nat-b
      google_compute_address.bastion-b
      google_compute_address.bastion[0]
      google_compute_address.nat-b
      google_compute_firewall.allow_internal
      google_compute_firewall.allow_jobs_nat
      google_compute_firewall.allow_public_icmp
      google_compute_firewall.allow_public_ssh
      google_compute_firewall.deny_target_ip
      google_compute_instance.bastion-b
      google_compute_instance.bastion[0]
      google_compute_network.main
      google_compute_subnetwork.build_com
      google_compute_subnetwork.build_org
      google_compute_subnetwork.jobs_com
      google_compute_subnetwork.jobs_org
      google_compute_subnetwork.public
      google_compute_subnetwork.workers
    ].map { |r| "module.#{module_name}.#{r}" }
  )

  warn("---> #{command.join(' ')}")
  system(*command) unless noop

  0
end

exit(main) if $PROGRAM_NAME == __FILE__
