#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

def main
  options = {
    counts: {
      com: Integer(ENV.fetch('COUNT_COM', '0')),
      org: Integer(ENV.fetch('COUNT_ORG', '0'))
    },
    module_name: ENV.fetch('MODULE_NAME', 'gce_project_1'),
    noop: false,
    terraform: ENV.fetch('TERRAFORM', 'terraform'),
    zones: ENV.fetch('ZONES', 'a,b,c,f').split(',').map(&:strip)
  }

  OptionParser.new do |opts|
    opts.on('--count-com=COUNT_COM', Integer) do |v|
      options[:counts][:com] = v
    end

    opts.on('--count-org=COUNT_ORG', Integer) do |v|
      options[:counts][:org] = v
    end

    opts.on('-m', '--module-name=MODULE_NAME') do |v|
      options[:module_name] = v.strip
    end

    opts.on('-n', '--noop') do
      options[:noop] = true
    end

    opts.on('-T', '--terraform=TERRAFORM') do |v|
      options[:terraform] = v.strip
    end

    opts.on('-Z', '--zones=ZONES') do |v|
      options[:zones] = v.split(',').map(&:strip)
    end
  end.parse!

  counts = options.fetch(:counts)
  module_name = options.fetch(:module_name)
  noop = !!options.fetch(:noop)
  terraform = options.fetch(:terraform)
  zones = options.fetch(:zones)

  command = %W[#{terraform} state rm]

  %i[com org].each do |site|
    zones.each do |zone|
      (counts.fetch(site) / zones.length).times do |n|
        command << %W[
          module.#{module_name}.module.gce_worker_#{zone}
          google_compute_instance.worker_#{site}[#{n}]
        ].join('.')
      end
    end
  end

  warn("---> #{command.join(' ')}")
  system(*command) unless noop

  0
end

exit(main) if $PROGRAM_NAME == __FILE__
