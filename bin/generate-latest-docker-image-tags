#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'net/http'
require 'openssl'

DEFAULT_STACKS = %w[
  android
  erlang
  go
  haskell
  jvm
  nodejs
  perl
  php
  python
  ruby
  amethyst
  connie
  garnet
].freeze

GITSHA1 = /^[0-9a-f]{7}$/.freeze

def main
  stacks = ENV['STACKS'].to_s.split.map(&:strip)
  stacks = DEFAULT_STACKS if stacks.empty?
  stacks.each do |stack|
    tag = latest_docker_image_tag("travisci/ci-#{stack}")
    $stdout.puts(%(latest_docker_image_#{stack} = #{tag.to_s.inspect}))
  end

  %w[
    gesund
    nat-conntracker
    worker
  ].each do |image|
    tag = latest_docker_image_tag("travisci/#{image}")
    $stdout.puts(
      %(latest_docker_image_#{image.tr('-', '_')} = #{tag.to_s.inspect})
    )
  end

  0
end

# FIXME: doesn't work if docker isn't installed
def latest_docker_image_tag(image)
  qs = URI.encode_www_form(
    service: 'registry.docker.io',
    scope: "repository:#{image}:pull"
  )

  token = docker_index_get(
    "/token?#{qs}",
    host: 'auth.docker.io'
  ).fetch('token')

  tags = docker_index_get(
    "/v2/#{image}/tags/list",
    headers: { 'Authorization' => "Bearer #{token}" }
  ).fetch('tags')

  # FIXME: this fails if user is not a member of Docker Hub org/team
  return "#{image}:#{tags.first}" if tags.all? { |t| t.match?(GITSHA1) }

  "#{image}:#{fancy_sorted(tags).reverse.fetch(0)}"
end

def fancy_sorted(tags)
  tags.sort do |a, b|
    if a =~ /^packer/ && b =~ /^packer/
      Integer(a.split('-')[1]) <=> Integer(b.split('-')[1])
    elsif a =~ /^v?\d/ && b =~ /^v?\d/
      vers2int(a) <=> vers2int(b)
    else
      a <=> b
    end
  end
end

def vers2int(vers)
  return 0 if vers.match?(GITSHA1)

  parts = vers.sub(/^v/, '').split('-')
  parts = parts.map { |part| part.split('.') }.flatten.compact
  parts.reject! { |part| part.start_with?('g', 'dirty') }
  parts << 0 if parts.length < 4
  parts.map { |part| format('%03d', Integer(part)) }.join.to_i
end

def docker_index_get(path, host: 'index.docker.io', headers: {},
                     debug: ENV['DOCKER_HTTP_DEBUG'] == '1')
  http = Net::HTTP.new(host, 443)
  http.use_ssl = true
  http.verify_mode = OpenSSL::SSL::VERIFY_PEER
  http.set_debug_output($stderr) if debug

  request = Net::HTTP::Get.new(path)
  request['Accept'] = 'application/json'
  headers.each do |key, value|
    request[key] = value
  end
  response = http.request(request)
  JSON.parse(response.body)
end

exit(main) if $PROGRAM_NAME == __FILE__
