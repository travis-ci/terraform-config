#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'

NOTSET = '<notset>'

def main(argv: ARGV)
  return usage if $stdin.tty? || argv.include?('-h') || argv.include?('--help')

  in_args = JSON.parse($stdin.read)
  zones = in_args.fetch('zones', '').split(',').map(&:strip).reject(&:empty?)
  count = Integer(in_args.fetch('count', zones.length))
  project = in_args.fetch('project')
  region = in_args.fetch('region')
  retries = Integer(in_args.fetch('retries', '4'))
  retry_sleep = Integer(in_args.fetch('retry_sleep', '120'))
  accounting = %w[1 yes on true].include?(
    ENV.fetch(
      'ACCOUNTING', in_args.fetch('accounting', true)
    ).to_s
  )
  retried = 0

  instances = {}
  while retried <= retries
    instances = fetch_nats_by_zone(zones, count, project, region)
    break unless accounting
    break if instances.length == count

    warn(
      "#{$PROGRAM_NAME}: sleeping=#{retry_sleep}s " \
      "instances_length=#{instances.length} count=#{count}"
    )

    sleep(retry_sleep)
    retried += 1
  end

  $stdout.puts(JSON.pretty_generate(instances))
  0
end

def fetch_nats_by_zone(zones, count, project, region)
  instances = {}
  instances_command = %w[
    gcloud compute instance-groups list-instances
  ]

  zones.each do |zone|
    (count / zones.length).times do |count_index|
      full_command = instances_command + %W[
        nat-#{zone}-#{count_index + 1}
        --project=#{project}
        --zone=#{region}-#{zone}
        --format="value(instance)"
      ]
      instance_name = `#{full_command.join(' ')}`.strip
      next if instance_name.empty?

      instances["nat-#{zone}-#{count_index + 1}"] = %W[
        projects
        #{project}
        zones
        #{region}-#{zone}
        instances
        #{instance_name}
      ].join('/')
    rescue StandardError => e
      warn e
    end
  end

  instances
end

def usage
  warn <<~EOF
    Usage: #{$PROGRAM_NAME} [-h|--help]

    Print a mapping of {zone}-{index}=>{instance-id} given a JSON blob
    containing the following arguments provided via stdin:

    accounting - boolean controlling count check and retries, default=false
    count - total number of expected instances, default=zones.length
    project - the gcloud project name *REQUIRED*
    region - the region in which to look for nat instances *REQUIRED*
    retries - number of total retries, default=4
    retry_sleep - sleep interval between retries, default=120
    zones - a comma-delimited list of zones within the region
  EOF
  2
end

exit(main) if $PROGRAM_NAME == __FILE__
